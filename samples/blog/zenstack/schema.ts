//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

import { type SchemaDef, type OperandExpression, ExpressionUtils } from "@zenstackhq/runtime/schema";
import path from "node:path";
import url from "node:url";
import { toDialectConfig } from "@zenstackhq/runtime/utils/sqlite-utils";
export const schema = {
    provider: {
        type: "sqlite",
        dialectConfigProvider: function () {
            return toDialectConfig("./dev.db", typeof __dirname !== 'undefined' ? __dirname : path.dirname(url.fileURLToPath(import.meta.url)));
        }
    },
    models: {
        User: {
            fields: {
                id: {
                    type: "String",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("cuid") }] }],
                    default: ExpressionUtils.call("cuid")
                },
                createdAt: {
                    type: "DateTime",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.call("now") }] }],
                    default: ExpressionUtils.call("now")
                },
                updatedAt: {
                    type: "DateTime",
                    updatedAt: true,
                    attributes: [{ name: "@updatedAt" }]
                },
                email: {
                    type: "String",
                    unique: true,
                    attributes: [{ name: "@unique" }]
                },
                name: {
                    type: "String",
                    optional: true
                },
                postCount: {
                    type: "Int",
                    attributes: [{ name: "@computed" }],
                    computed: true
                },
                role: {
                    type: "Role",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.literal("USER") }] }],
                    default: "USER"
                },
                posts: {
                    type: "Post",
                    array: true,
                    relation: { opposite: "author" }
                },
                profile: {
                    type: "Profile",
                    optional: true,
                    relation: { opposite: "user" }
                }
            },
            idFields: ["id"],
            uniqueFields: {
                id: { type: "String" },
                email: { type: "String" }
            },
            computedFields: {
                postCount(): OperandExpression<number> {
                    throw new Error("This is a stub for computed field");
                }
            }
        },
        Profile: {
            fields: {
                id: {
                    type: "String",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("cuid") }] }],
                    default: ExpressionUtils.call("cuid")
                },
                bio: {
                    type: "String",
                    optional: true
                },
                age: {
                    type: "Int",
                    optional: true
                },
                user: {
                    type: "User",
                    optional: true,
                    attributes: [{ name: "@relation", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("userId")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }] }],
                    relation: { opposite: "profile", fields: ["userId"], references: ["id"] }
                },
                userId: {
                    type: "String",
                    unique: true,
                    optional: true,
                    attributes: [{ name: "@unique" }],
                    foreignKeyFor: [
                        "user"
                    ]
                }
            },
            idFields: ["id"],
            uniqueFields: {
                id: { type: "String" },
                userId: { type: "String" }
            }
        },
        Post: {
            fields: {
                id: {
                    type: "String",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("cuid") }] }],
                    default: ExpressionUtils.call("cuid")
                },
                createdAt: {
                    type: "DateTime",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.call("now") }] }],
                    default: ExpressionUtils.call("now")
                },
                updatedAt: {
                    type: "DateTime",
                    updatedAt: true,
                    attributes: [{ name: "@updatedAt" }]
                },
                title: {
                    type: "String"
                },
                content: {
                    type: "String"
                },
                published: {
                    type: "Boolean",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.literal(false) }] }],
                    default: false
                },
                author: {
                    type: "User",
                    attributes: [{ name: "@relation", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("authorId")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }] }],
                    relation: { opposite: "posts", fields: ["authorId"], references: ["id"] }
                },
                authorId: {
                    type: "String",
                    foreignKeyFor: [
                        "author"
                    ]
                }
            },
            idFields: ["id"],
            uniqueFields: {
                id: { type: "String" }
            }
        }
    },
    enums: {
        Role: {
            ADMIN: "ADMIN",
            USER: "USER"
        }
    },
    authType: "User",
    procedures: {
        signUp: {
            params: [
                { name: "email", type: "String" },
                { name: "name", optional: true, type: "String" }
            ] as [
                email: {
                    "name": "email";
                    "type": "String";
                },
                name: {
                    "name": "name";
                    "type": "String";
                    "optional": true;
                }
            ],
            returnType: "User",
            mutation: true
        }
    },
    plugins: {}
} as const satisfies SchemaDef;
export type SchemaType = typeof schema;
